#!/bin/bash

#logger In rc.local
echo "Candle: in rc.local" >> /dev/kmsg


totalk=$(awk '/^MemTotal:/{print $2}' /proc/meminfo)
#logger total memory: $totalk

if [ "$totalk" -lt 600000 ]
then
  echo "Candle: low memory, so enabling swap: $totalk" >> /dev/kmsg
  touch /boot/candle_swap_enabled.txt
  /usr/sbin/dphys-swapfile setup
  /usr/sbin/dphys-swapfile swapon
else
  echo "Candle: enough memory, no need to enable swap: $totalk" >> /dev/kmsg
  if [ -e /boot/candle_swap_enabled.txt ] 
  then
    rm /boot/candle_swap_enabled.txt
  fi
  /usr/sbin/dphys-swapfile swapoff
  if [ -e /home/pi/.webthings/swap ] 
  then
    rm /home/pi/.webthings/swap
  fi
fi

# RUN BOOTUP SCRIPT IF IT EXISTS
if [ -f /boot/bootup_actions.sh ]
then
  echo " "
  echo "Candle: rc.local: detected bootup_actions.sh file." >> /dev/kmsg

  # Avoid bootloops
  mv /boot/bootup_actions.sh /boot/bootup_actions_failed.sh

  if [ -f /boot/rotate180.txt ]
  then
    /bin/ply-image /boot/splash_updating180.png
  else
    /bin/ply-image /boot/splash_updating.png
  fi

  # Wait for IP address for at most 30 seconds
  echo "waiting for IP address"
  for i in {1..30}
  do
    #echo "current hostname: $(hostname -I)"
    if [ "$(hostname -I)" = "" ]
    then
      echo "Candle: rc.local doing bootup_actions: no network yet $i" >> /dev/kmsg
      echo "no network yet $i"
      sleep 1    
    else
      echo "Candle: rc.local doing bootup_actions: IP address detected: $(hostname -I)" >> /dev/kmsg
      break
    fi
  done

  # Force a synchronisation with a time server to avoid certificate issues
  if [ -f /boot/candle_hardware_clock.txt ]
  then
    echo "Candle: rc.local doing bootup_actions: hardware clock detected, forcing sync with NTP server" >> /dev/kmsg
    rm /boot/candle_hardware_clock.txt
    sudo systemctl start systemd-timesyncd
  fi

  if [ -f /boot/developer.txt ]
  then
    systemctl start ssh.service
  fi
  echo "Candle: rc.local doing bootup_actions: STARTING" >> /dev/kmsg
  chmod +x /boot/bootup_actions_failed.sh
  /bin/bash /boot/bootup_actions_failed.sh
  echo "Candle: bootup_actions.sh file complete" >> /dev/kmsg
  echo " " >> /dev/kmsg
  # rm /boot/bootup_actions_failed.sh
  sleep 5
  if [ -f /boot/developer.txt ]
  then
    sleep 60
  fi
  reboot now
  sleep 5
  exit 0
fi




# SELF-REPAIR

# Fix missing gateway, just in case something went totally wrong.

if [ ! -f /home/pi/webthings/gateway/build/app.js ] || [ ! -f /home/pi/webthings/gateway/build/static/index.html ] || [ ! -d /home/pi/webthings/gateway/node_modules ] || [ ! -d /home/pi/webthings/gateway/build/static/bundle ]; 
then

  if [ -f /boot/developer.txt ];
  then
    systemctl start ssh.service
  fi

  echo "missing build/app.js - attempting repair"
  echo "Candle: ERROR! /home/pi/webthings/gateway/build/app.js file was missing. Attempting repair. (rc)" >> /dev/kmsg
  echo "$(date) - broken controller detected (rc)" >> /boot/candle.log

  if [ -f /boot/rotate180.txt ];
  then
    /bin/ply-image /boot/splash_updating180.png
  else
    /bin/ply-image /boot/splash_updating.png
  fi

  if [ -d /ro ]
  then
    echo "starting controller repair in /ro... (rc)" >> /boot/candle.log
    echo "starting controller repair in /ro... (rc)" >> /dev/kmsg
    # This shouldn't even be possible really 
    echo "setting to RW"
    mount -o remount,rw /ro
      
      
chroot /ro sh -c "$(cat <<END
cd /home/pi

if [ -f /home/pi/controller_backup.tar ];
then
tar -xvf controller_backup.tar

elif [ -f /home/pi/webthings-old/gateway/build/app.js ] && [ -f /home/pi/webthings-old/gateway/build/static/index.html ] && [ -d /home/pi/webthings-old/gateway/node_modules ] && [ -d /home/pi/webthings-old/gateway/build/static/bundle ];
then
mv ./webthings-old ./webthings
echo "restored controller backup in /ro (rc)" >> /dev/kmsg
echo "restored controller backup in /ro (rc)" >> /boot/candle.log

else
wget https://raw.githubusercontent.com/createcandle/install-scripts/main/install_candle_controller.sh
chmod +x ./install_candle_controller.sh
sudo -u pi ./install_candle_controller.sh
rm ./install_candle_controller.sh

fi
END
)"

    # re-enable read-only mode
    echo "setting back to RO"
    mount -o remount,ro /ro
      
  else
    cd /home/pi || exit
    
    # If a backup file exists, restore that
    if [ -f /home/pi/controller_backup.tar ];
    then
      tar -xvf controller_backup.tar
      echo "$(date) - restored controller backup (rc)" >> /boot/candle.log
      echo "$(date) - restored controller backup (rc)" >> /dev/kmsg
      
    
    
    # If an old version is detected, try switching to that
    elif [ -f /home/pi/webthings-old/gateway/build/app.js ] && [ -f /home/pi/webthings/gateway/.post_upgrade_complete ] && [ -f /home/pi/webthings-old/gateway/build/static/index.html ]  && [ -d /home/pi/webthings-old/gateway/node_modules ] && [ -d /home/pi/webthings-old/gateway/build/static/bundle ]; 
    then
        mv ./webthings-old ./webthings
        echo "$(date) - restored old controller directory (rc)" >> /boot/candle.log
        echo "$(date) - restored old controller directory (rc)" >> /dev/kmsg
    
    
    # If all else fails, try a complete rebuild
    else
        echo "$(date) - starting controller regeneration... (rc)" >> /boot/candle.log
        echo "$(date) - starting controller regeneration... (rc)" >> /dev/kmsg
        wget https://raw.githubusercontent.com/createcandle/install-scripts/main/install_candle_controller.sh
        chmod +x ./install_candle_controller.sh
        sudo -u pi ./install_candle_controller.sh
        rm ./install_candle_controller.sh
    fi
  fi

  if [ -f /boot/developer.txt ]
  then
    sleep 60
  fi
  sleep 5
  
  if [ -f /home/pi/webthings/gateway/build/app.js ] && [ -f /home/pi/webthings/gateway/.post_upgrade_complete ] && [ -f /home/pi/webthings/gateway/build/static/index.html ]  && [ -d /home/pi/webthings/gateway/node_modules ] && [ -d /home/pi/webthings/gateway/build/static/bundle ];
  then
    echo "$(date) - controller regeneration complete (rc)" >> /boot/candle.log
    echo "$(date) - controller regeneration complete (rc)" >> /dev/kmsg
    reboot now
    sleep 5
    
  else
    echo "$(date) - controller regeneration failed (rc)" >> /boot/candle.log
    echo "$(date) - controller regeneration failed (rc)" >> /dev/kmsg
    
    # Show error image
    pkill xinit
    sleep 1
    if [ -e "/bin/ply-image" ]; then
      /bin/ply-image /boot/error.png
    fi
    sleep 7200
  fi
  
  exit 0
fi


echo "Candle: rc.local: normal run" >> /dev/kmsg


# For bluetooth keyboard?
modprobe hidp

# Disable WiFi power save
if [ -f /boot/disable_wifi_power_save.txt ] 
then
  /sbin/iw dev wlan0 set power_save off
fi



# Start X server
if [ -f /boot/candle_kiosk.txt ]
then
  if [ "$totalk" -gt 1500000 ]
  then
    echo "Candle: Enough memory to start X server" >> /dev/kmsg
    logger Starting X
    if [ -n "$(ls /dev/input/by-id/usb-ILITEK_ILITEK-TP-mouse 2>/dev/null)" ]
    then
      # Raspad touchscreen
      su - pi -c 'startx -- -nocursor &'
    else
      # any mouse
      if [ -n "$(ls /dev/input/by-id/*-mouse 2>/dev/null)" ]
      then
        su - pi -c startx &
        #su - pi -c 'unclutter -idle 10 -root -display :0 &'
      else
        if [ ! -f /boot/hide_mouse_pointer.txt ]
        then
          su - pi    startx &
        else
          su - pi -c 'startx -- -nocursor &'
          #su - pi -c 'unclutter -idle 0 -root -display :0 &'
        fi
      fi
    fi
  fi
fi


# Generate debug file if requested
if [ -f /boot/generate_debug.txt ]; then
  rm /boot/generate_debug.txt
  sleep 5
  echo "Candle: generating debug file" >> /dev/kmsg
  rm /boot/debug.txt
  /home/pi/debug.sh > /boot/debug.txt
fi

if [ ! -f /boot/developer.txt ]; then
  journalctl --vacuum-size=10K
fi

echo "Candle: end of rc.local" >> /dev/kmsg
exit 0


